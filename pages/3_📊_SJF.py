import streamlit as st
import pandas as pd
import sys
import os

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from utils.sjf import calcular_sjf
from utils.visualizacion import crear_grafico_gantt, mostrar_metricas
from utils.helpers import validar_procesos, calcular_tiempo_total

st.set_page_config(
    page_title="SJF - Simulador Planificaci√≥n", 
    page_icon="üìä",
    layout="wide"
)

if 'procesos_sjf' not in st.session_state:
    st.session_state.procesos_sjf = []
if 'procesos_calculados_sjf' not in st.session_state:
    st.session_state.procesos_calculados_sjf = []
if 'tiempo_actual_sjf' not in st.session_state:
    st.session_state.tiempo_actual_sjf = 0
if 'simulacion_iniciada_sjf' not in st.session_state:
    st.session_state.simulacion_iniciada_sjf = False

def main():
    st.title("üìä Algoritmo SJF (Shortest Job First)")
    
    st.markdown("""
    El algoritmo **SJF (Shortest Job First)** ejecuta primero los procesos con **menor tiempo de CPU**,
    minimizando el tiempo de espera promedio. Esta versi√≥n es **no preemptiva**.
    """)
    
    with st.sidebar:
        st.header("‚ÑπÔ∏è Acerca de SJF")
        st.info("""
        **Caracter√≠sticas:**
        - ‚ùå No preemptivo
        - ‚úÖ Minimiza espera promedio
        - ‚úÖ Simple de implementar
        - ‚ùå Inanici√≥n posible
        - ‚ùå Requiere conocer duraciones
        """)
        
        st.header("üìä M√©tricas Clave")
        st.metric("Complejidad", "O(n log n)")
        st.metric("Preemptivo", "No")
        st.metric("√ìptimo para", "Procesos conocidos")
        
        if st.button("üè† Volver al Inicio"):
            st.switch_page("app.py")
    
    st.header("üì• Configuraci√≥n de Procesos")
    
    st.info("üí° **Nota:** En SJF cl√°sico, todos los procesos llegan al tiempo 0")
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        num_procesos = st.number_input(
            "N√∫mero de procesos", 
            min_value=1, 
            max_value=8, 
            value=4,
            key="sjf_procesos"
        )
    
    with col2:
        st.write("")
        st.write("")
        if st.button("üîÑ Reiniciar Procesos", use_container_width=True):
            st.session_state.procesos_sjf = []
            st.session_state.simulacion_iniciada_sjf = False
            st.rerun()
    
    st.subheader("‚úèÔ∏è Definir Duraciones de Procesos")
    
    if not st.session_state.procesos_sjf:
        st.session_state.procesos_sjf = [
            {'pid': i, 'llegada': 0, 'duracion': (i+1)*2} 
            for i in range(num_procesos)
        ]
    
    procesos_sjf = []
    cols = st.columns(4)
    
    for i in range(num_procesos):
        with cols[i % 4]:
            duracion = st.number_input(
                f"Duraci√≥n P{i}", 
                min_value=1, 
                value=st.session_state.procesos_sjf[i]['duracion'] if i < len(st.session_state.procesos_sjf) else (i+1)*2,
                key=f"sjf_duracion_{i}"
            )
            
            procesos_sjf.append({
                'pid': i,
                'llegada': 0,
                'duracion': duracion
            })
    
    st.session_state.procesos_sjf = procesos_sjf
    
    if st.session_state.procesos_sjf:
        st.subheader("üìã Procesos (Ordenados por Duraci√≥n)")
        procesos_ordenados = sorted(st.session_state.procesos_sjf, key=lambda x: x['duracion'])
        df_sjf = pd.DataFrame(procesos_ordenados)
        df_sjf['Proceso'] = df_sjf['pid'].apply(lambda x: f'P{x}')
        df_sjf['Orden Ejecuci√≥n'] = range(1, len(procesos_ordenados) + 1)
        st.dataframe(df_sjf[['Orden Ejecuci√≥n', 'Proceso', 'duracion']], use_container_width=True)
    
    st.header("üéØ Simulaci√≥n SJF")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        if st.button("üöÄ Ejecutar Simulaci√≥n SJF", type="primary", use_container_width=True):
            es_valido, mensaje = validar_procesos(st.session_state.procesos_sjf)
            if es_valido:
                with st.spinner("Ejecutando algoritmo SJF..."):
                    resultado_sjf = calcular_sjf(st.session_state.procesos_sjf.copy())
                    
                    st.session_state.procesos_calculados_sjf = resultado_sjf
                    st.session_state.tiempo_total_sjf = calcular_tiempo_total(resultado_sjf)
                    st.session_state.tiempo_actual_sjf = 0
                    st.session_state.simulacion_iniciada_sjf = True
                    st.rerun()
            else:
                st.error(f"‚ùå {mensaje}")
    
    with col2:
        if st.button("üîÑ Reiniciar Simulaci√≥n", use_container_width=True):
            st.session_state.simulacion_iniciada_sjf = False
            st.session_state.tiempo_actual_sjf = 0
            st.rerun()
    
    if st.session_state.get("simulacion_iniciada_sjf", False):
        st.header("üìä Visualizaci√≥n de la Simulaci√≥n SJF")
        
        tiempo_actual = st.session_state.tiempo_actual_sjf
        tiempo_total = st.session_state.tiempo_total_sjf
        
        st.subheader(f"‚è∞ Tiempo Actual: {tiempo_actual} / {tiempo_total}")
        
        col1, col2, col3, col4 = st.columns(4)
        
        if col1.button("‚èÆÔ∏è Reiniciar", key="reiniciar_sjf"):
            st.session_state.tiempo_actual_sjf = 0
            st.rerun()

        if col2.button("‚óÄÔ∏è Retroceder", key="retroceder_sjf"):
            if st.session_state.tiempo_actual_sjf > 0:
                st.session_state.tiempo_actual_sjf -= 1
                st.rerun()

        if col3.button("Avanzar ‚ñ∂Ô∏è", key="avanzar_sjf"):
            if st.session_state.tiempo_actual_sjf < tiempo_total:
                st.session_state.tiempo_actual_sjf += 1
                st.rerun()

        if col4.button("‚ñ∂Ô∏è‚ñ∂Ô∏è Ver Todo", key="ver_todo_sjf"):
            st.session_state.tiempo_actual_sjf = tiempo_total
            st.rerun()

        if tiempo_total > 0:
            st.progress(st.session_state.tiempo_actual_sjf / tiempo_total)
        else:
            st.progress(0)

        fig = crear_grafico_gantt(
            st.session_state.procesos_calculados_sjf,
            st.session_state.tiempo_actual_sjf,
            "SJF"
        )
        
        st.pyplot(fig)

        if st.session_state.tiempo_actual_sjf == tiempo_total:
            st.markdown("---")
            st.subheader("üìà M√©tricas Finales SJF")
            
            metricas = mostrar_metricas(st.session_state.procesos_calculados_sjf)
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("‚è±Ô∏è Retorno Promedio", f"{metricas['retorno_promedio']:.2f}")
            with col2:
                st.metric("‚è≥ Espera Promedio", f"{metricas['espera_promedio']:.2f}")
            with col3:
                st.metric("‚úÖ Procesos Completados", metricas['procesos_completados'])
            
            st.subheader("üîÑ Secuencia de Ejecuci√≥n")
            secuencia = " ‚Üí ".join([f"P{p['pid']}" for p in st.session_state.procesos_calculados_sjf])
            st.success(f"**Orden de ejecuci√≥n:** {secuencia}")

        with st.expander("üìã Ver datos calculados de los procesos"):
            st.dataframe(pd.DataFrame(st.session_state.procesos_calculados_sjf))

    with st.expander("üìö Explicaci√≥n del Algoritmo SJF"):
        st.markdown("""
        ## üìä Shortest Job First (SJF)
        
        **¬øC√≥mo funciona SJF (No Preemptivo)?**
        
        1. **Todos los procesos** llegan al tiempo 0 (asumido)
        2. **Se ordenan** por duraci√≥n de CPU (menor a mayor)
        3. **Se ejecutan** en ese orden hasta completar
        4. **No hay interrupciones** una vez que empieza un proceso
        
        **Ejemplo pr√°ctico:**
        ```
        Procesos: P0(duraci√≥n=8), P1(duraci√≥n=4), P2(duraci√≥n=2), P3(duraci√≥n=6)
        
        Orden SJF: P2 ‚Üí P1 ‚Üí P3 ‚Üí P0  (por duraci√≥n: 2, 4, 6, 8)
        
        Tiempo 0: Ejecuta P2 (m√°s corto)
        Tiempo 2: P2 termina, ejecuta P1 (siguiente m√°s corto)
        Tiempo 6: P1 termina, ejecuta P3 
        Tiempo 12: P3 termina, ejecuta P0
        Tiempo 20: P0 termina
        ```
        
        **Ventajas:**
        - ‚úÖ **M√≠nimo tiempo de espera promedio** posible para lotes
        - ‚úÖ Simple de entender e implementar
        - ‚úÖ Eficiente para procesos por lotes
        - ‚úÖ Mejor que FCFS en t√©rminos de rendimiento
        
        **Desventajas:**
        - ‚ùå **Inanici√≥n** para procesos largos
        - ‚ùå **Requiere conocer duraciones** de antemano
        - ‚ùå **No es preemptivo** (poco responsivo)
        - ‚ùå **Impr√°ctico** en sistemas interactivos
        
        **Variante preemptiva: SRT**
        - SJF puede hacerse preemptivo (SRT - Shortest Remaining Time)
        - En SRT, si llega un proceso m√°s corto, interrumpe el actual
        
        **F√≥rmula de optimalidad:**
        - SJF es **√≥ptimo** para minimizar el tiempo de espera promedio
        - Pero solo cuando todos los procesos est√°n disponibles al mismo tiempo
        
        **Aplicaciones en la vida real:**
        - Procesamiento por lotes (batch processing)
        - Sistemas de backend con trabajos conocidos
        - Renderizado de video/audio con duraciones estimadas
        - Compilaci√≥n de proyectos grandes
        
        **Consejo:** SJF funciona mejor cuando las duraciones son conocidas y hay mezcla de procesos cortos y largos.
        """)

if __name__ == "__main__":
    main()